"""
Django settings for private_blog_project project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Inicializar django-environ
env = environ.Env(
    # Establecer tipos por defecto y valores por defecto
    DEBUG=(bool, False),
    SECRET_KEY=(str, 'django-insecure-oace-9pxtmop*cv5r1bd*4v=)yb+7j2&86s12c6qqnfmls(^98'), # Valor por defecto para desarrollo
    # Variables para la base de datos de producción
    DATABASE_URL=(str, 'sqlite:///db.sqlite3'), # Valor por defecto para desarrollo
    # Variables para Cloud Run (si no se usan las del proxy)
    CLOUD_SQL_CONNECTION_NAME=(str, None),
    # Variables para Google Cloud Storage (para estáticos, si lo usas)
    GS_BUCKET_NAME=(str, None),
)

# Leer el archivo .env si existe (para desarrollo local)
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

# Configuración de ALLOWED_HOSTS
# En producción, Cloud Run usa el dominio del servicio.
# En desarrollo, puede ser '127.0.0.1' o el dominio de tu máquina.
ALLOWED_HOSTS = ['127.0.0.1', 'localhost'] # Valores por defecto para desarrollo

# Si estamos en un entorno de Cloud Run (identificado por la variable K_SERVICE)
# O si DEBUG está en False (indicando producción)
if not DEBUG:
    # Ajustar ALLOWED_HOSTS para Cloud Run
    ALLOWED_HOSTS = [env('K_SERVICE', default='')] # K_SERVICE es el nombre del servicio en Cloud Run
    # Puedes añadir un dominio personalizado si lo configuras
    # ALLOWED_HOSTS.append('tu-dominio-personalizado.com')
    ALLOWED_HOSTS.append(os.environ.get('CLOUD_RUN_HOSTNAME')) # El hostname real de Cloud Run
    ALLOWED_HOSTS = [host for host in ALLOWED_HOSTS if host] # Eliminar vacíos

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'blog',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly'
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata'
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'private_blog_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'blog' / 'static',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'private_blog_project.wsgi.application'

# Configuración de la base de datos
DATABASES = {
    'default': env.db(), # Lee la URL de la base de datos de la variable DATABASE_URL
}

# Si estamos en un entorno de Cloud Run, ajustamos la conexión a Cloud SQL
if os.getenv('CLOUD_SQL_CONNECTION_NAME'): # Esta variable la estableceremos en Cloud Run
    DATABASES['default']['HOST'] = '127.0.0.1' # El proxy de Cloud SQL escucha en localhost
    DATABASES['default']['PORT'] = '5432' # Puerto por defecto de PostgreSQL
    # Las credenciales se obtienen de DATABASE_URL o de variables de entorno separadas
    # DATABASE_URL debería ser 'postgres://USER:PASSWORD@/DBNAME?host=/cloudsql/CLOUD_SQL_CONNECTION_NAME'
    # O si usas el proxy localmente: 'postgres://USER:PASSWORD@127.0.0.1:5432/DBNAME'



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Directorios adicionales donde Django buscará archivos estáticos
STATICFILES_DIRS = [
    BASE_DIR / 'blog' / 'static', # Esto apunta a my_private_blog/blog/static
]

# Directorio donde Django recogerá todos los archivos estáticos para producción
STATIC_ROOT = BASE_DIR / 'staticfiles' # Se creará más tarde para despliegue

# Configuración de Whitenoise para servir archivos estáticos comprimidos
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
