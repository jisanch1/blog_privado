# my_private_blog/cloudbuild.yaml

# Las variables de entorno de Cloud Build, como $PROJECT_ID y $COMMIT_SHA, se inyectan automáticamente.
# La región se define aquí directamente. (us-central1)
steps:
# 1. Construir la imagen Docker
- name: 'gcr.io/cloud-builders/docker'
  id: 'Build Docker Image'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/private-blog-django:$COMMIT_SHA', '.']

# 2. Empujar la imagen al Google Container Registry (GCR)
- name: 'gcr.io/cloud-builders/docker'
  id: 'Push to GCR'
  args: ['push', 'gcr.io/$PROJECT_ID/private-blog-django:$COMMIT_SHA']

# 3. Ejecutar migraciones de la base de datos en Cloud SQL
# Las variables para la base de datos se obtendrán de Secret Manager y se usarán con sus nombres originales.
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'Run Migrations'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O /usr/local/bin/cloud_sql_proxy && chmod +x /usr/local/bin/cloud_sql_proxy
    /usr/local/bin/cloud_sql_proxy -instances="${_CLOUD_SQL_CONNECTION_NAME}"=tcp:5432 &
    sleep 5
    cd /workspace
    pip install -r requirements.txt
    # Usar las variables de entorno tal como se mapean desde Secret Manager
    export DATABASE_URL="postgres://${_DB_USER}:${_DB_PASSWORD}@127.0.0.1:5432/${_DB_NAME}"
    python manage.py migrate --noinput
  secretEnv: ['_DB_USER', '_DB_PASSWORD', '_DB_NAME', '_CLOUD_SQL_CONNECTION_NAME'] # Las variables se inyectan en este paso

# 4. Desplegar el servicio en Cloud Run
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'Deploy to Cloud Run'
  args:
  - 'run'
  - 'deploy'
  - 'private-blog-service' # Nombre de tu servicio Cloud Run
  - '--image=gcr.io/$PROJECT_ID/private-blog-django:$COMMIT_SHA'
  - '--region=us-central1'
  - '--platform=managed'
  - '--allow-unauthenticated'
  - '--port=8080'
  - '--add-cloudsql-instances=${_CLOUD_SQL_CONNECTION_NAME}' # Se obtiene del secreto
  - '--service-account=cloud-build-deployer@$PROJECT_ID.iam.gserviceaccount.com'
  - '--max-instances=2'
  env: # Variables de entorno que se pasan a la aplicación Django en Cloud Run
  - 'DEBUG=False'
  # Construye DATABASE_URL usando las mismas variables de entorno que Cloud Build ya inyectó
  - 'DATABASE_URL=postgres://${_DB_USER}:${_DB_PASSWORD}@/${_DB_NAME}?host=/cloudsql/${_CLOUD_SQL_CONNECTION_NAME}'
  secretEnv: ['SECRET_KEY', '_DB_USER', '_DB_PASSWORD', '_DB_NAME', '_CLOUD_SQL_CONNECTION_NAME'] # Las variables se inyectan en el servicio Cloud Run

# Declaración de cómo Cloud Build debe acceder a los secretos de Secret Manager
# Cada secreto de Secret Manager se mapea a UN único nombre de variable de entorno
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/django-secret-key-prod/versions/latest
    env: 'SECRET_KEY' # Mapea el secreto a la variable SECRET_KEY
  - versionName: projects/$PROJECT_ID/secrets/db-user/versions/latest
    env: '_DB_USER' # Mapea el secreto a la variable _DB_USER
  - versionName: projects/$PROJECT_ID/secrets/db-password/versions/latest
    env: '_DB_PASSWORD' # Mapea el secreto a la variable _DB_PASSWORD
  - versionName: projects/$PROJECT_ID/secrets/db-name/versions/latest
    env: '_DB_NAME' # Mapea el secreto a la variable _DB_NAME
  - versionName: projects/$PROJECT_ID/secrets/cloud-sql-connection-name/versions/latest
    env: '_CLOUD_SQL_CONNECTION_NAME' # Mapea el secreto a la variable _CLOUD_SQL_CONNECTION_NAME

# Opciones de Log
options:
  logging: CLOUD_LOGGING_ONLY # Le dice a Cloud Build que envíe los logs solo a Cloud Logging (Stackdriver)
  # logsBucket: 'gs://YOUR_PROJECT_ID_cloudbuild_logs' # Opcional: si quieres un bucket específico.